plugins {
    id 'com.gradleup.shadow' version '8.3.0'
    id "com.palantir.graal" version "0.7.2"
}

apply plugin: 'java'
apply plugin: 'application'

graal {
    mainClass 'org.doble.adr.ADR'
    graalVersion '19.2.0.1'
    outputName 'adr'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21 
    mainClassName =   "org.doble.adr.ADR"  
}

group = 'org.doble'
version = '3.2.3-alpha'

description = "adr-j"


tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    //implementation 'info.picocli:picocli:4.6.1'
    implementation 'info.picocli:picocli:4.7.6'

    // Jansi used for handling ANSO escape codes - even on Windows
    implementation 'org.fusesource.jansi:jansi:2.4.1'
    
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.hamcrest:hamcrest:3.0'
    testImplementation(platform('org.junit:junit-bom:5.11.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation group: 'com.google.jimfs', name: 'jimfs', version:'1.3.0'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

shadowJar {
    //classifier 'fat' 
    exclude 'META-INF/maven/org.fusesource.jansi/jansi/pom.xml'
    exclude 'META-INF/maven/org.fusesource.jansi/jansi/pom.properties'
}

task releaseJar(dependsOn: "shadowJar", type: Copy) {
    group = 'ADR-J - Release'
    description "Creates a JAR release."
    from("$buildDir/libs/adr-j-${project.version}-all.jar")
    rename { String fileName ->
        fileName.replace("-${project.version}-all", "")
    }
    into("$buildDir/releases")
    // set executable with read permissions (first true) and for all (false)
    file("$buildDir/releases/adr-j.jar").setExecutable(true, false)
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}
